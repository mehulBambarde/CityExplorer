// <auto-generated />
using System;
using Dbcontexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace restapi.Migrations
{
    [DbContext(typeof(CityInfoContext))]
    [Migration("20230414140621_Initial3")]
    partial class Initial3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "The one with that big park.",
                            name = "New York City"
                        },
                        new
                        {
                            id = 2,
                            description = "The one with the cathedral that was never really finished.",
                            name = "Antwerp"
                        },
                        new
                        {
                            id = 3,
                            description = "The one with that big tower.",
                            name = "Paris"
                        });
                });

            modelBuilder.Entity("PointOfInterest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("cityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("cityID");

                    b.ToTable("PointOfInterests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            cityID = 1,
                            description = "The most visited urban park in the United States.",
                            name = "Central Park"
                        },
                        new
                        {
                            id = 2,
                            cityID = 1,
                            description = "A 102-story skyscraper located in Midtown Manhattan.",
                            name = "Empire State Building"
                        },
                        new
                        {
                            id = 3,
                            cityID = 2,
                            description = "A Gothic style cathedral, conceived by architects Jan and Pieter Appelmans.",
                            name = "Cathedral"
                        },
                        new
                        {
                            id = 4,
                            cityID = 2,
                            description = "The the finest example of railway architecture in Belgium.",
                            name = "Antwerp Central Station"
                        },
                        new
                        {
                            id = 5,
                            cityID = 3,
                            description = "A wrought iron lattice tower on the Champ de Mars, named after engineer Gustave Eiffel.",
                            name = "Eiffel Tower"
                        },
                        new
                        {
                            id = 6,
                            cityID = 3,
                            description = "The world's largest museum.",
                            name = "The Louvre"
                        });
                });

            modelBuilder.Entity("PointOfInterestDTO", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Cityid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Cityid");

                    b.ToTable("PointOfInterestDTO");
                });

            modelBuilder.Entity("PointOfInterest", b =>
                {
                    b.HasOne("City", "city")
                        .WithMany()
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("PointOfInterestDTO", b =>
                {
                    b.HasOne("City", null)
                        .WithMany("PointOfInterests")
                        .HasForeignKey("Cityid");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("PointOfInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
